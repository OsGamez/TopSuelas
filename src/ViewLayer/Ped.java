/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ViewLayer;

import ObjectLayer.Cliente;
import ObjectLayer.Color;
import ObjectLayer.Corrida;
import ObjectLayer.Dpedido;
import ObjectLayer.ObjectClientes;
import ObjectLayer.ObjectCorridas;
import ObjectLayer.ObjectDetalle;
import ObjectLayer.ObjectParametros;
import ObjectLayer.ObjectPedidos;
import ObjectLayer.ObjectPrecios;
import ObjectLayer.ObjectProductos;
import ObjectLayer.Parametro;
import ObjectLayer.Pedido;
import ObjectLayer.Precio;
import ObjectLayer.Producto;
import ObjectLayer.Sesioninfo;
import java.awt.event.ItemEvent;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Objects;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

public class Ped extends javax.swing.JFrame {

    Sesioninfo se = new Sesioninfo();
    String Serie = se.getSerie(), serieActual;
    ObjectClientes objC = new ObjectClientes();
    Cliente cliente = new Cliente();
    ObjectProductos op = new ObjectProductos();
    ObjectCorridas oc = new ObjectCorridas();
    ObjectPrecios pc = new ObjectPrecios();
    ObjectDetalle detalle = new ObjectDetalle();
    ObjectParametros Par = new ObjectParametros();
    ObjectPedidos pedido = new ObjectPedidos();
    Color cl = new Color();
    Corrida cr = new Corrida();
    Precio ps = new Precio();
    Principal main = new Principal();
    SimpleDateFormat fecha = new SimpleDateFormat();
    int ct = 1, Renglon, cont, idcliente, sum, idprod, cantidad;

    ArrayList<String> array = new ArrayList<String>();
    DefaultListModel<Cliente> modeloListaCliente = new DefaultListModel<Cliente>();
    DefaultListModel<Producto> modeloListaProducto = new DefaultListModel<Producto>();
    DefaultTableModel modelPedido = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }

    };
    String c1 = "0", c2 = "0", c3 = "0", c4 = "0", c5 = "0", c6 = "0", c7 = "0", c8 = "0", c9 = "0", c10 = "0", c11 = "0", c12 = "0";
    DecimalFormat format = new DecimalFormat("#.00");
    DecimalFormat precioB = new DecimalFormat("#.00");
    SimpleDateFormat sm = new SimpleDateFormat("dd/MM/yyyy");
    String codigo, ms;
    ImageIcon notificacion = new ImageIcon("C:\\tsmanager\\imagenes\\push.png");
    ImageIcon campana = new ImageIcon("C:\\tsmanager\\imagenes\\bell.png");

    public Ped() {
        initComponents();
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        JbNuevo.setToolTipText("Realizar Pedido");
        JbEliminar.setToolTipText("Cancelar Pedido");
        JbBorrar.setToolTipText("Buscar Pedido");
        JbImprimir.setToolTipText("Imprimir");
        JbSalir.setToolTipText("Salir");
        JbActualizar.setToolTipText("Actualizar Pedido");
        JbBorrar.setToolTipText("Limpiar Busqueda");
        Calendar fecha = new GregorianCalendar();
        JdCaptura.setCalendar(fecha);
        JdPedido.setCalendar(fecha);
        JdEntrega.setCalendar(fecha);
        JdRecibido.setCalendar(fecha);
        JtNpedido.setEditable(false);
        JtNpedido.setForeground(java.awt.Color.red);
        JtPedido.getTableHeader().setReorderingAllowed(false);
        JbActualizar.setEnabled(false);
        JbEliminar.setEnabled(false);
        JdCaptura.setEnabled(false);
        JbSerie.setText(se.getSerie());
        JtNpc.requestFocus();
        JtCorrida.setEditable(false);
        JtColor.setEditable(false);
        LoadColumns();
        ocultarCampos();
        cargarListenerPedido();
        cargarPedido();
        mostrarSerie();
        JtNpedido.setEditable(false);
        JtCobranza.setText("-");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel8 = new javax.swing.JLabel();
        JcPrecio = new javax.swing.JCheckBox();
        JtCorrida = new javax.swing.JTextField();
        JtabDatos = new javax.swing.JTabbedPane();
        JpDpedido = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        JtPedido = new javax.swing.JTable();
        JpObservaciones = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        JtCobranza = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        JtCancelar = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        JdCaptura = new com.toedter.calendar.JDateChooser();
        JdPedido = new com.toedter.calendar.JDateChooser();
        JdRecibido = new com.toedter.calendar.JDateChooser();
        JdEntrega = new com.toedter.calendar.JDateChooser();
        JpFacturas = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        JtFacturas = new javax.swing.JTable();
        jLabel24 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        JtColor = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        JpCliente = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        JlClientes = new javax.swing.JList<>();
        JtCliente = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        JtSuela = new javax.swing.JTextField();
        JbBorrar = new javax.swing.JButton();
        JbNuevo = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        JtCant = new javax.swing.JTextField();
        JbCalle = new javax.swing.JLabel();
        JbCliente = new javax.swing.JLabel();
        JbEliminar = new javax.swing.JButton();
        JbPlazo = new javax.swing.JLabel();
        JbActualizar = new javax.swing.JButton();
        JbAgente = new javax.swing.JLabel();
        JbImprimir = new javax.swing.JButton();
        JbColonia = new javax.swing.JLabel();
        JbSalir = new javax.swing.JButton();
        JbCD = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        JbCP = new javax.swing.JLabel();
        JtNpedido = new javax.swing.JTextField();
        JbEstado = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        JbPais = new javax.swing.JLabel();
        JtNpc = new javax.swing.JTextField();
        JpSuelas = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        JlSuelas = new javax.swing.JList<>();
        jLabel4 = new javax.swing.JLabel();
        JtOcompra = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        lblPares = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        JbSerie = new javax.swing.JLabel();
        JtPrecio = new javax.swing.JTextField();
        Jpi = new javax.swing.JLabel();
        Jpf = new javax.swing.JLabel();
        JbQuitar = new javax.swing.JButton();
        JbBuscar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PEDIDOS");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("Combinaci√≥n");

        JcPrecio.setText("PRIMER");
        JcPrecio.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                JcPrecioItemStateChanged(evt);
            }
        });

        JtCorrida.setForeground(new java.awt.Color(51, 153, 0));

        JtabDatos.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        JtPedido.setModel(modelPedido);
        JtPedido.setSelectionBackground(new java.awt.Color(102, 153, 255));
        JtPedido.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JtPedidoMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(JtPedido);

        javax.swing.GroupLayout JpDpedidoLayout = new javax.swing.GroupLayout(JpDpedido);
        JpDpedido.setLayout(JpDpedidoLayout);
        JpDpedidoLayout.setHorizontalGroup(
            JpDpedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JpDpedidoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1302, Short.MAX_VALUE))
        );
        JpDpedidoLayout.setVerticalGroup(
            JpDpedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JpDpedidoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        JtabDatos.addTab("Detalle del Pedido", JpDpedido);

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Cobranza");

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel15.setText("Cancelaci√≥n");

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel16.setText("Fecha Captura:");

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel17.setText("Fecha Pedido:");

        jLabel18.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel18.setText("Fecha Recibido:");

        jLabel19.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel19.setText("Fecha Entrega:");

        javax.swing.GroupLayout JpObservacionesLayout = new javax.swing.GroupLayout(JpObservaciones);
        JpObservaciones.setLayout(JpObservacionesLayout);
        JpObservacionesLayout.setHorizontalGroup(
            JpObservacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JpObservacionesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(JpObservacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel7)
                    .addComponent(JtCobranza, javax.swing.GroupLayout.DEFAULT_SIZE, 633, Short.MAX_VALUE)
                    .addComponent(jLabel15)
                    .addComponent(JtCancelar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 401, Short.MAX_VALUE)
                .addGroup(JpObservacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(JpObservacionesLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabel18)
                        .addGap(18, 18, 18)
                        .addComponent(JdRecibido, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE))
                    .addGroup(JpObservacionesLayout.createSequentialGroup()
                        .addGroup(JpObservacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel16)
                            .addGroup(JpObservacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel17)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JpObservacionesLayout.createSequentialGroup()
                                    .addGap(2, 2, 2)
                                    .addComponent(jLabel19))))
                        .addGap(18, 18, 18)
                        .addGroup(JpObservacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(JdCaptura, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(JdPedido, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(JdEntrega, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(19, 19, 19))
        );
        JpObservacionesLayout.setVerticalGroup(
            JpObservacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JpObservacionesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(JpObservacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(JpObservacionesLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JtCobranza, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JtCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(JpObservacionesLayout.createSequentialGroup()
                        .addGroup(JpObservacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel16)
                            .addComponent(JdCaptura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(JpObservacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(JdPedido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel17))
                        .addGap(18, 18, 18)
                        .addGroup(JpObservacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel18)
                            .addComponent(JdRecibido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(JpObservacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel19)
                            .addComponent(JdEntrega, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        JtabDatos.addTab("Observaciones", JpObservaciones);

        JtFacturas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "#", "CODIGO", "ESTILO", "NO", "CORRIDA", "NO", "COMBINACION", "CANT", "PRECIO", "IMPORTE", "ST"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(JtFacturas);

        jLabel24.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel24.setText("Detalle de Facturas Correspondientes al Pedido");

        javax.swing.GroupLayout JpFacturasLayout = new javax.swing.GroupLayout(JpFacturas);
        JpFacturas.setLayout(JpFacturasLayout);
        JpFacturasLayout.setHorizontalGroup(
            JpFacturasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JpFacturasLayout.createSequentialGroup()
                .addGroup(JpFacturasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(JpFacturasLayout.createSequentialGroup()
                        .addGap(339, 339, 339)
                        .addComponent(jLabel24))
                    .addGroup(JpFacturasLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 918, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(371, Short.MAX_VALUE))
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        JpFacturasLayout.setVerticalGroup(
            JpFacturasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JpFacturasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel24)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        JtabDatos.addTab("Facturas", JpFacturas);

        JtColor.setForeground(new java.awt.Color(51, 153, 0));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Cliente:");

        JpCliente.setBorder(null);

        JlClientes.setModel(modeloListaCliente);
        JlClientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JlClientesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(JlClientes);

        javax.swing.GroupLayout JpClienteLayout = new javax.swing.GroupLayout(JpCliente);
        JpCliente.setLayout(JpClienteLayout);
        JpClienteLayout.setHorizontalGroup(
            JpClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JpClienteLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        JpClienteLayout.setVerticalGroup(
            JpClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
        );

        JtCliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JtClienteMouseClicked(evt);
            }
        });
        JtCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JtClienteKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                JtClienteKeyTyped(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Suela:");

        JtSuela.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JtSuelaMouseClicked(evt);
            }
        });
        JtSuela.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JtSuelaKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                JtSuelaKeyTyped(evt);
            }
        });

        JbBorrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/iconfinder-trash-4341321_120557.png"))); // NOI18N
        JbBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JbBorrarActionPerformed(evt);
            }
        });

        JbNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/1486485588-add-create-new-math-sign-cross-plus_81186.png"))); // NOI18N
        JbNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JbNuevoActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel13.setText("Cantidad:");

        JtCant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JtCantActionPerformed(evt);
            }
        });

        JbCalle.setForeground(new java.awt.Color(0, 51, 102));
        JbCalle.setText("----------------------------------------------------------");

        JbCliente.setForeground(new java.awt.Color(0, 51, 102));
        JbCliente.setText("----------------------------------------------------------");

        JbEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/crossregular_106296.png"))); // NOI18N
        JbEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JbEliminarActionPerformed(evt);
            }
        });

        JbPlazo.setForeground(new java.awt.Color(0, 51, 102));
        JbPlazo.setText("-----------------------------------------------------------");

        JbActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/1491313940-repeat_82991.png"))); // NOI18N
        JbActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JbActualizarActionPerformed(evt);
            }
        });

        JbAgente.setForeground(new java.awt.Color(0, 51, 102));
        JbAgente.setText("-----------------------------------------------------------");

        JbImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/Print_icon-icons.com_73705.png"))); // NOI18N
        JbImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JbImprimirActionPerformed(evt);
            }
        });

        JbColonia.setForeground(new java.awt.Color(0, 51, 102));
        JbColonia.setText("----------------------------------------------------------");

        JbSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/exit_icon-icons.com_70975.png"))); // NOI18N
        JbSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JbSalirActionPerformed(evt);
            }
        });

        JbCD.setForeground(new java.awt.Color(0, 51, 102));
        JbCD.setText("----------------------------------------------------------");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("No. Pedido:");

        JbCP.setForeground(new java.awt.Color(0, 51, 102));
        JbCP.setText("----------------------------------------------------------");

        JtNpedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JtNpedidoActionPerformed(evt);
            }
        });

        JbEstado.setForeground(new java.awt.Color(0, 51, 102));
        JbEstado.setText("----------------------------------------------------------");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("No. Pedido cliente:");

        JbPais.setForeground(new java.awt.Color(0, 51, 102));
        JbPais.setText("-----------------------------------------------------------");

        JtNpc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JtNpcActionPerformed(evt);
            }
        });

        JpSuelas.setBorder(null);

        JlSuelas.setModel(modeloListaProducto);
        JlSuelas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JlSuelasMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(JlSuelas);

        javax.swing.GroupLayout JpSuelasLayout = new javax.swing.GroupLayout(JpSuelas);
        JpSuelas.setLayout(JpSuelasLayout);
        JpSuelasLayout.setHorizontalGroup(
            JpSuelasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
        );
        JpSuelasLayout.setVerticalGroup(
            JpSuelasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JpSuelasLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Orden de  Compra:");

        JtOcompra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JtOcompraActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(51, 153, 0));
        jLabel10.setText("Pares:");

        lblPares.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblPares.setForeground(new java.awt.Color(51, 153, 0));
        lblPares.setText("0");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(51, 153, 0));
        jLabel9.setText("Costo:");

        lblTotal.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblTotal.setForeground(new java.awt.Color(51, 153, 0));
        lblTotal.setText("0.00");

        JbSerie.setText("jLabel5");

        Jpi.setText("jLabel5");

        Jpf.setText("jLabel5");

        JbQuitar.setText("<<< Quitar Suela");
        JbQuitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JbQuitarActionPerformed(evt);
            }
        });

        JbBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/loupe_78347.png"))); // NOI18N
        JbBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JbBuscarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(JpCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addGap(18, 18, 18)
                            .addComponent(JtCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(JbBorrar)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(JtNpedido, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3)))))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(JbPais, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(JbAgente, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(JbPlazo, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(JbCalle, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(JbCP, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(JbColonia, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(JbCD, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(JbEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(JbCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(JcPrecio)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel13)
                                        .addGap(18, 18, 18)
                                        .addComponent(JtCant, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(73, 73, 73)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(JpSuelas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(18, 18, 18)
                                        .addComponent(JtSuela, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addComponent(jLabel10)
                                .addGap(12, 12, 12)
                                .addComponent(lblPares)
                                .addGap(37, 37, 37)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(JbQuitar))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(JtNpc, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(41, 41, 41)
                                .addComponent(jLabel4)
                                .addGap(32, 32, 32)
                                .addComponent(JtOcompra, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(49, 49, 49))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(JbBuscar)
                                .addGap(26, 26, 26)
                                .addComponent(JbNuevo)
                                .addGap(31, 31, 31)
                                .addComponent(JbEliminar)
                                .addGap(26, 26, 26)
                                .addComponent(JbActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(JbImprimir)
                                .addGap(28, 28, 28)
                                .addComponent(JbSalir)
                                .addGap(86, 86, 86)
                                .addComponent(JbSerie))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(12, 12, 12)
                                .addComponent(JtCorrida, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(JtColor, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(24, 24, 24)
                        .addComponent(JtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Jpi)
                        .addGap(18, 18, 18)
                        .addComponent(Jpf)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(JtabDatos)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(JbBorrar)
                    .addComponent(JbNuevo)
                    .addComponent(JbEliminar)
                    .addComponent(JbActualizar)
                    .addComponent(JbImprimir)
                    .addComponent(JbSalir)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(JbSerie)
                            .addComponent(JtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Jpi)
                            .addComponent(Jpf)))
                    .addComponent(JbBuscar))
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(JtNpedido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JtNpc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(JtOcompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4))
                    .addComponent(JtCorrida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JtColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel8))))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(JtCant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13))
                        .addGap(155, 155, 155)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(lblPares)
                            .addComponent(jLabel9)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblTotal)
                                .addComponent(JbQuitar))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(62, 62, 62)
                                .addComponent(JpCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(51, 51, 51))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(JcPrecio)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(5, 5, 5)
                                        .addComponent(jLabel2))
                                    .addComponent(JtCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(JbCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(JbCalle, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(JbCP, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(JbColonia, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(11, 11, 11)
                                .addComponent(JbCD, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(11, 11, 11)
                                .addComponent(JbEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(JbPais, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(JbPlazo, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(JbAgente, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(JtSuela, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                        .addComponent(JpSuelas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(151, 151, 151)))
                .addComponent(JtabDatos, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mostrarSerie() {
        if (Serie.equals("A")) {
            JbSerie.setIcon(campana);
            JbSerie.setText("");
        } else if (Serie.equals("B")) {
            JbSerie.setIcon(notificacion);
            JbSerie.setText("");
        }
    }

    private void limpiarListaClientes() {
        modeloListaCliente.clear();
    }

    private void limpiarListaProductos() {
        modeloListaProducto.clear();
    }

    private void ocultarCampos() {
        JpCliente.setVisible(false);
        JpSuelas.setVisible(false);
        Jpi.setVisible(false);
        Jpf.setVisible(false);
        JtPrecio.setVisible(false);
        JbBorrar.setVisible(false);
    }

    private void cargarPedido() {
        int num = 1;
        ArrayList<Pedido> listP = pedido.getPedidoActual();
        if (listP.size() > 0) {
            for (Pedido par : listP) {
                int Np = Integer.parseInt(par.getNpedido());
                int var = num + Np;
                JtNpedido.setText(String.valueOf(var));
            }
        } else {
            JtNpedido.setText(String.valueOf(num));
        }
    }

    private void validarCorridas() {
        int pt1 = Integer.parseInt(Jpi.getText().substring(0, 2));
        int pt2 = Integer.parseInt(Jpf.getText().substring(0, 2));
        double num = 0.5;

        sum = pt2 - pt1 + 1;

        String colums = null;
        Object[] datos = {"0"};
        PuntosCaptura p = new PuntosCaptura(null, true);
        for (int i = pt1; i <= pt2; i++) {
            colums = String.valueOf(i);
            p.modelP.addColumn(colums, datos);

            for (double j = i + num; j <= i + num; j++) {
                colums = String.valueOf(j);
                p.modelP.addColumn(colums, datos);
            }
        }
        p.SumaPuntos = sum;
        p.Pares = Integer.parseInt(JtCant.getText());
        p.Jtdatos.changeSelection(0, 0, true, false);
        p.array = array;
        p.setVisible(true);
    }

    private void MostrarDetalle() {
        ArrayList<Dpedido> detalles = new ArrayList<Dpedido>();
        Object[] obj = array.toArray();
        String dt[] = new String[21];
        double precio = Double.parseDouble(JtPrecio.getText());
        double importe = Double.parseDouble(JtCant.getText()) * precio;

        switch (obj.length) {
            case 12:
                c1 = (String) obj[0];
                c2 = (String) obj[1];
                c3 = (String) obj[2];
                c4 = (String) obj[3];
                c5 = (String) obj[4];
                c6 = (String) obj[5];
                c7 = (String) obj[6];
                c8 = (String) obj[7];
                c9 = (String) obj[8];
                c10 = (String) obj[9];
                c11 = (String) obj[10];
                c12 = (String) obj[11];
                break;
            case 10:
                c1 = (String) obj[0];
                c2 = (String) obj[1];
                c3 = (String) obj[2];
                c4 = (String) obj[3];
                c5 = (String) obj[4];
                c6 = (String) obj[5];
                c7 = (String) obj[6];
                c8 = (String) obj[7];
                c9 = (String) obj[8];
                c10 = (String) obj[9];
                break;
            case 8:
                c1 = (String) obj[0];
                c2 = (String) obj[1];
                c3 = (String) obj[2];
                c4 = (String) obj[3];
                c5 = (String) obj[4];
                c6 = (String) obj[5];
                c7 = (String) obj[6];
                c8 = (String) obj[7];
                break;
            case 6:
                c1 = (String) obj[0];
                c2 = (String) obj[1];
                c3 = (String) obj[2];
                c4 = (String) obj[3];
                c5 = (String) obj[4];
                c6 = (String) obj[5];
                break;
            default:
                break;
        }
        dt[0] = String.valueOf(idprod);
        dt[2] = JtSuela.getText();
        dt[3] = JtColor.getText();
        dt[4] = JtCorrida.getText();
        dt[5] = c1;
        dt[6] = c2;
        dt[7] = c3;
        dt[8] = c4;
        dt[9] = c5;
        dt[10] = c6;
        dt[11] = c7;
        dt[12] = c8;
        dt[13] = c9;
        dt[14] = c10;
        dt[15] = c11;
        dt[16] = c12;
        dt[17] = JtCant.getText();
        dt[18] = format.format(precio);
        dt[19] = format.format(importe);
        dt[20] = "10";

        //COMPROBAR SI SE HA BUSCADO UN PEDIDO
        if (comprobarPedido()) {

            //COMPROBAR SI SE ESTA REGISTRANDO EL MISMO PRODUCTO
            if (validarProductoDuplicado()) {
                limpiarCampos();
                limpiarProducto();
            } else {
                //REGISTRAR EL NUEVO DETALLE
                Pedido pd = new Pedido();
                int index = modelPedido.getRowCount() - 1;
                cont = Integer.parseInt(JtPedido.getValueAt(index, 1).toString()) + 1;
                modelPedido.addRow(dt);
                double costoPedido = Double.parseDouble(lblTotal.getText());
                int TotalPares = Integer.parseInt(lblPares.getText());
                pd.setNpedido(JtNpedido.getText());
                pd.setTotalPares(TotalPares);
                pd.setCostoTotal(costoPedido);

                Date Entrega = JdEntrega.getDate();
                long e = Entrega.getTime();
                java.sql.Date fechaEntrega = new java.sql.Date(e);
                Date Pedido = JdPedido.getDate();
                long p = Pedido.getTime();
                java.sql.Date fechaPedido = new java.sql.Date(p);
                dt[1] = String.valueOf(cont);

                Dpedido Dt = new Dpedido();
                Dt.setRenglon(cont);
                Dt.setNpedido(JtNpedido.getText());
                Dt.setId_Cliente(idcliente);
                Dt.setFecha_Pedido(fechaPedido);
                Dt.setFecha_Entrega(fechaEntrega);
                Dt.setId_Producto(idprod);
                Dt.setCorrida(JtCorrida.getText());
                Dt.setC1(Integer.parseInt(c1));
                Dt.setC2(Integer.parseInt(c2));
                Dt.setC3(Integer.parseInt(c3));
                Dt.setC4(Integer.parseInt(c4));
                Dt.setC5(Integer.parseInt(c5));
                Dt.setC6(Integer.parseInt(c6));
                Dt.setC7(Integer.parseInt(c7));
                Dt.setC8(Integer.parseInt(c8));
                Dt.setC9(Integer.parseInt(c9));
                Dt.setC10(Integer.parseInt(c10));
                Dt.setC11(Integer.parseInt(c11));
                Dt.setC12(Integer.parseInt(c12));
                Dt.setPares(Integer.parseInt(JtCant.getText()));
                Dt.setImporte(importe);
                Dt.setSerie(Serie);
                Dt.setCSurt1(0);
                Dt.setCSurt2(0);
                Dt.setCSurt3(0);
                Dt.setCSurt4(0);
                Dt.setCSurt5(0);
                Dt.setCSurt6(0);
                Dt.setCSurt7(0);
                Dt.setCSurt8(0);
                Dt.setCSurt9(0);
                Dt.setCSurt10(0);
                Dt.setCSurt11(0);
                Dt.setCSurt12(0);
                Dt.setParesSurt(0);
                Dt.setStatus("10");
                Dt.setPrecio(precio);
                detalles.add(Dt);

                if (Serie.equals("A")) {
                    if (pedido.agregarPedidoA(pd, detalles, JtNpedido.getText())) {
                        JOptionPane.showMessageDialog(this, "Se agrego la suela al pedido!!!", "TOP-SUELAS", JOptionPane.INFORMATION_MESSAGE);
                        limpiarCampos();
                        limpiarProducto();
                        idprod = 0;
                    } else {
                        JOptionPane.showMessageDialog(this, "Este pedido no se puede actualizar!!!", "TOP-SUELAS", JOptionPane.INFORMATION_MESSAGE);
                        limpiarCampos();
                        limpiarProducto();
                        idprod = 0;
                    }
                } else {
                    if (pedido.agregarPedidoAPhy(pd, detalles, JtNpedido.getText())) {
                        JOptionPane.showMessageDialog(this, "Se agrego la suela al pedido!!!", "TOP-SUELAS", JOptionPane.INFORMATION_MESSAGE);
                        limpiarCampos();
                        limpiarProducto();
                        idprod = 0;
                    } else {
                        JOptionPane.showMessageDialog(this, "Este pedido no se puede actualizar!!!", "TOP-SUELAS", JOptionPane.INFORMATION_MESSAGE);
                        limpiarCampos();
                        limpiarProducto();
                        idprod = 0;
                    }
                }
            }
        } else {
            if (validarProductoDuplicado()) {
                limpiarCampos();
                limpiarProducto();
            } else {
                dt[1] = String.valueOf(ct);
                ct++;
                modelPedido.addRow(dt);
                limpiarCampos();
                limpiarProducto();
                idprod = 0;
            }
        }
    }

    private boolean validarProductoDuplicado() {
        for (int i = 0; i < JtPedido.getRowCount(); i++) {
            if (JtPedido.getValueAt(i, 0).equals(String.valueOf(idprod))) {
                int canFinal = Integer.parseInt(JtCant.getText()) + Integer.parseInt(JtPedido.getValueAt(i, 17).toString());
                int cant1 = Integer.parseInt(c1) + Integer.parseInt(JtPedido.getValueAt(i, 5).toString());
                int cant2 = Integer.parseInt(c2) + Integer.parseInt(JtPedido.getValueAt(i, 6).toString());
                int cant3 = Integer.parseInt(c3) + Integer.parseInt(JtPedido.getValueAt(i, 7).toString());
                int cant4 = Integer.parseInt(c4) + Integer.parseInt(JtPedido.getValueAt(i, 8).toString());
                int cant5 = Integer.parseInt(c5) + Integer.parseInt(JtPedido.getValueAt(i, 9).toString());
                int cant6 = Integer.parseInt(c6) + Integer.parseInt(JtPedido.getValueAt(i, 10).toString());
                int cant7 = Integer.parseInt(c7) + Integer.parseInt(JtPedido.getValueAt(i, 11).toString());
                int cant8 = Integer.parseInt(c8) + Integer.parseInt(JtPedido.getValueAt(i, 12).toString());
                int cant9 = Integer.parseInt(c9) + Integer.parseInt(JtPedido.getValueAt(i, 13).toString());
                int cant10 = Integer.parseInt(c10) + Integer.parseInt(JtPedido.getValueAt(i, 14).toString());
                int cant11 = Integer.parseInt(c11) + Integer.parseInt(JtPedido.getValueAt(i, 15).toString());
                int cant12 = Integer.parseInt(c12) + Integer.parseInt(JtPedido.getValueAt(i, 16).toString());

                Double precio = Double.parseDouble(JtPedido.getValueAt(i, 18).toString());
                double impor = canFinal * precio;
                modelPedido.setValueAt(String.valueOf(cant1), i, 5);
                modelPedido.setValueAt(String.valueOf(cant2), i, 6);
                modelPedido.setValueAt(String.valueOf(cant3), i, 7);
                modelPedido.setValueAt(String.valueOf(cant4), i, 8);
                modelPedido.setValueAt(String.valueOf(cant5), i, 9);
                modelPedido.setValueAt(String.valueOf(cant6), i, 10);
                modelPedido.setValueAt(String.valueOf(cant7), i, 11);
                modelPedido.setValueAt(String.valueOf(cant8), i, 12);
                modelPedido.setValueAt(String.valueOf(cant9), i, 13);
                modelPedido.setValueAt(String.valueOf(cant10), i, 14);
                modelPedido.setValueAt(String.valueOf(cant11), i, 15);
                modelPedido.setValueAt(String.valueOf(cant12), i, 16);
                modelPedido.setValueAt(String.valueOf(canFinal), i, 17);
                modelPedido.setValueAt(format.format(precio), i, 18);
                modelPedido.setValueAt(format.format(impor), i, 19);
                return true;
            } else {
                return false;
            }
        }
        return false;
    }

    private boolean comprobarPedido() {
        ArrayList<Pedido> list = pedido.pedidoGetByID(JtNpedido.getText(), Serie);

        if (list.size() > 0) {
            return true;
        } else {
            return false;
        }

    }

    private boolean validarFecha() {
        if (JdEntrega.getDate().equals(JdCaptura.getDate())) {
            int opcion = JOptionPane.showConfirmDialog(this, "¬øLa fecha de entrega es igual a la de captura deseas continuar?", "TOP-SUELAS", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (opcion == JOptionPane.YES_OPTION) {
                return true;
            } else {
                return false;
            }
        } else {
            return true;
        }
    }

    private void cargarDetalle() {
//        ArrayList<Pedido> list = pedido.pedidoGetByID(JtNpedido.getText());
//        if (list.size() > 0) {
//            for (ObjectLayer.Pedido ls : list) {
//                DecimalFormat impo = new DecimalFormat("#.00");
//                String arreglo[] = new String[21];
//                arreglo[0] = String.valueOf(ls.getId_Producto());
//                arreglo[1] = String.valueOf(ls.getRenglon());
//                arreglo[2] = ls.getSuela();
//                arreglo[3] = ls.getColor();
//                arreglo[4] = ls.getCorrida();
//                arreglo[5] = String.valueOf(ls.getC1());
//                arreglo[6] = String.valueOf(ls.getC2());
//                arreglo[7] = String.valueOf(ls.getC3());
//                arreglo[8] = String.valueOf(ls.getC4());
//                arreglo[9] = String.valueOf(ls.getC5());
//                arreglo[10] = String.valueOf(ls.getC6());
//                arreglo[11] = String.valueOf(ls.getC7());
//                arreglo[12] = String.valueOf(ls.getC8());
//                arreglo[13] = String.valueOf(ls.getC9());
//                arreglo[14] = String.valueOf(ls.getC10());
//                arreglo[15] = String.valueOf(ls.getC11());
//                arreglo[16] = String.valueOf(ls.getC12());
//                arreglo[17] = String.valueOf(ls.getPares());
//                arreglo[18] = format.format(ls.getPrecio());
//                arreglo[19] = impo.format(ls.getImporte());
//                arreglo[20] = ls.getStatus();
//                modelPedido.addRow(arreglo);
//            }
//        }
    }

    private void cleanTable() {
        int row = modelPedido.getRowCount();
        if (row > 0) {
            for (int i = row - 1; i >= 0; i--) {
                modelPedido.removeRow(i);
            }
        }
    }

    private boolean validarDetalle() {
        if (this.JtPedido.getRowCount() == 0 && this.JtPedido.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "No hay productos para el pedido", "TOP-SUELAS", JOptionPane.WARNING_MESSAGE);
            return false;
        } else {
            return true;
        }
    }

    private void cargarListenerPedido() {
        modelPedido.addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                int row = modelPedido.getRowCount();
                double sumatoria = 0;
                int pares = 0;
                DecimalFormat total = new DecimalFormat("#.00");
                for (int i = 0; i < row; i++) {
                    String importe = (String) modelPedido.getValueAt(i, 19);
                    String tpares = (String) modelPedido.getValueAt(i, 17);
                    sumatoria += Double.parseDouble(importe);
                    pares += Integer.parseInt(tpares);
                }
                lblTotal.setText(total.format(sumatoria));
                lblPares.setText(String.valueOf(pares));
            }
        });
    }

    private void LoadColumns() {
        modelPedido.addColumn("ID");
        modelPedido.addColumn("#");
        modelPedido.addColumn("SUELA");
        modelPedido.addColumn("COLOR");
        modelPedido.addColumn("CORRIDA");
        modelPedido.addColumn("C1");
        modelPedido.addColumn("C2");
        modelPedido.addColumn("C3");
        modelPedido.addColumn("C4");
        modelPedido.addColumn("C5");
        modelPedido.addColumn("C6");
        modelPedido.addColumn("C7");
        modelPedido.addColumn("C8");
        modelPedido.addColumn("C9");
        modelPedido.addColumn("C10");
        modelPedido.addColumn("C11");
        modelPedido.addColumn("C12");
        modelPedido.addColumn("CANTIDAD");
        modelPedido.addColumn("PRECIO");
        modelPedido.addColumn("IMPORTE");
        modelPedido.addColumn("ESTATUS");

        JtPedido.getColumnModel().getColumn(0).setMaxWidth(0);
        JtPedido.getColumnModel().getColumn(0).setMinWidth(0);
        JtPedido.getColumnModel().getColumn(0).setPreferredWidth(0);

        JtPedido.getColumnModel().getColumn(1).setMaxWidth(0);
        JtPedido.getColumnModel().getColumn(1).setMinWidth(0);
        JtPedido.getColumnModel().getColumn(1).setPreferredWidth(0);
    }

    private void JcPrecioItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_JcPrecioItemStateChanged
        JtSuela.requestFocus();
    }//GEN-LAST:event_JcPrecioItemStateChanged

    private void JtPedidoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JtPedidoMouseClicked
        int row = JtPedido.rowAtPoint(evt.getPoint());
        //Producto Pro = new Producto();
        //        JtRenglon.setText(String.valueOf(JtPedido.getValueAt(row, 1)));
        /*Pro.setId_Producto(Integer.parseInt(JtPedido.getValueAt(row, 0).toString()));
        Pro.setDescripcion(JtPedido.getValueAt(row, 2).toString());
        JcSuela.getModel().setSelectedItem(Pro);
        JtprecioA.setText(JtPedido.getValueAt(row, 18).toString());
        //JcPrecio.setEnabled(false);
        CambiarProducto();*/
    }//GEN-LAST:event_JtPedidoMouseClicked

    private void JbBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JbBorrarActionPerformed
        limpiarPedido();
        limpiarCliente();
        cleanTable();
        habilitarCampos();
        cargarPedido();
        JtNpc.requestFocus();
        JtCliente.setEditable(true);
        Serie = se.getSerie();
        mostrarSerie();
    }//GEN-LAST:event_JbBorrarActionPerformed

    private void deshabilitarCampos() {
        JbNuevo.setEnabled(false);
        JbBuscar.setEnabled(false);
        JbBorrar.setVisible(true);
        JbEliminar.setEnabled(true);
        JbActualizar.setEnabled(true);
        JtNpc.setEditable(false);
        JtOcompra.setEditable(false);
    }

    private void habilitarCampos() {
        JbNuevo.setEnabled(true);
        JbBuscar.setEnabled(true);
        JbBorrar.setVisible(false);
        JbEliminar.setEnabled(false);
        JtNpedido.setEditable(false);
        JbActualizar.setEnabled(false);
        JtNpc.setEditable(true);
        JtOcompra.setEditable(true);
    }

    private void nuevoPedido() {
        ArrayList<Dpedido> detalles = new ArrayList<>();
        ArrayList<Parametro> listP = pedido.getParametro();

        int row = modelPedido.getRowCount();
        String Condicion = "Nada";
        int TotalPares = Integer.parseInt(lblPares.getText());
        Date Captura = JdCaptura.getDate();
        long c = Captura.getTime();
        java.sql.Date fechaCaptura = new java.sql.Date(c);
        Date Entrega = JdEntrega.getDate();
        long e = Entrega.getTime();
        java.sql.Date fechaEntrega = new java.sql.Date(e);
        Date Pedido = JdPedido.getDate();
        long p = Pedido.getTime();
        java.sql.Date fechaPedido = new java.sql.Date(p);
        Date Recibido = JdRecibido.getDate();
        long r = Recibido.getTime();
        java.sql.Date fechaRecibido = new java.sql.Date(r);
        double costoPedido = Double.parseDouble(lblTotal.getText());

        Pedido pd = new Pedido();
        pd.setNpedido(JtNpedido.getText());
        pd.setNpedidoCl(JtNpc.getText());
        pd.setId_Cliente(idcliente);
        pd.setFecha_Pedido(fechaPedido);
        pd.setFecha_Entrega(fechaEntrega);
        pd.setCondiciones(Condicion);
        pd.setObservaciones(JtCobranza.getText());
        pd.setId_Usuario(se.getId_usuario());
        pd.setSerie(Serie);
        pd.setTotalPares(TotalPares);
        pd.setCostoTotal(costoPedido);
        pd.setStatus("10");
        pd.setParesSurt(0);
        pd.setOrdenCompra(JtOcompra.getText());
        pd.setFecha_Recibido(fechaRecibido);
        pd.setFecha_Captura(fechaCaptura);

        Parametro pam = new Parametro();
        pam.setNpedido(JtNpedido.getText());
        pam.setEntrada(0);
        pam.setFcatura(0);
        pam.setSalida(0);
        pam.setMes("0");

        for (int i = 0; i < row; i++) {
            Dpedido Dt = new Dpedido();
            Dt.setRenglon(Integer.parseInt((String) modelPedido.getValueAt(i, 1)));
            Dt.setNpedido(JtNpedido.getText());
            Dt.setId_Cliente(idcliente);
            Dt.setFecha_Pedido(fechaPedido);
            Dt.setFecha_Entrega(fechaEntrega);
            Dt.setId_Producto(Integer.parseInt((String) modelPedido.getValueAt(i, 0)));
            Dt.setCorrida(modelPedido.getValueAt(i, 4).toString());
            Dt.setC1(Integer.parseInt((String) modelPedido.getValueAt(i, 5)));
            Dt.setC2(Integer.parseInt((String) modelPedido.getValueAt(i, 6)));
            Dt.setC3(Integer.parseInt((String) modelPedido.getValueAt(i, 7)));
            Dt.setC4(Integer.parseInt((String) modelPedido.getValueAt(i, 8)));
            Dt.setC5(Integer.parseInt((String) modelPedido.getValueAt(i, 9)));
            Dt.setC6(Integer.parseInt((String) modelPedido.getValueAt(i, 10)));
            Dt.setC7(Integer.parseInt((String) modelPedido.getValueAt(i, 11)));
            Dt.setC8(Integer.parseInt((String) modelPedido.getValueAt(i, 12)));
            Dt.setC9(Integer.parseInt((String) modelPedido.getValueAt(i, 13)));
            Dt.setC10(Integer.parseInt((String) modelPedido.getValueAt(i, 14)));
            Dt.setC11(Integer.parseInt((String) modelPedido.getValueAt(i, 15)));
            Dt.setC12(Integer.parseInt((String) modelPedido.getValueAt(i, 16)));
            Dt.setPares(Integer.parseInt((String) modelPedido.getValueAt(i, 17)));
            Dt.setImporte(Double.parseDouble((String) modelPedido.getValueAt(i, 19)));
            Dt.setSerie(Serie);
            Dt.setCSurt1(0);
            Dt.setCSurt2(0);
            Dt.setCSurt3(0);
            Dt.setCSurt4(0);
            Dt.setCSurt5(0);
            Dt.setCSurt6(0);
            Dt.setCSurt7(0);
            Dt.setCSurt8(0);
            Dt.setCSurt9(0);
            Dt.setCSurt10(0);
            Dt.setCSurt11(0);
            Dt.setCSurt12(0);
            Dt.setParesSurt(0);
            Dt.setStatus(modelPedido.getValueAt(i, 20).toString());
            Dt.setPrecio(Double.parseDouble((String) modelPedido.getValueAt(i, 18)));
            detalles.add(Dt);
        }

        //VALIDAR QUE LA TABLA NO ESTE VACIA
        if (validarDetalle()) {
            //VALIDAR QUE EL # DE PEDIDO DEL CLIENTE Y LA ORDEN DE COMPRA  NO ESTEN VACIOS
            if (JtNpc.getText().isEmpty() || JtOcompra.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "El numero de pedido del cliente y la orden de compra son obligatorios!!!", "TOP-SUELAS", JOptionPane.WARNING_MESSAGE);
                JtNpc.requestFocus();
            } else {
                //VALIDAR SI NO HAY UN REGISTRO EN PARAMETRO   
                if (listP.size() <= 0) {
                    //SI ES SERIE A
                    if (Serie.equals("A")) {
                        if (pedido.insertarVentaA(pd, detalles, pam)) {
                            JOptionPane.showMessageDialog(this, "Pedido realizado correctamente!!!", "TOP-SUELAS", JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            JOptionPane.showMessageDialog(this, "No se pudo registrar el pedido contacte con sistemas!!!", "TOP-SUELAS", JOptionPane.WARNING_MESSAGE);
                        }
                        cleanTable();
                        limpiarCliente();
                        limpiarPedido();
                        cargarPedido();
                        JtNpc.requestFocus();
                    } //SI ES SERIE B
                    else if (Serie.equals("B")) {
                        if (pedido.insertarVentaB(pd, detalles, pam)) {
                            JOptionPane.showMessageDialog(this, "Pedido realizado correctamente!!!", "TOP-SUELAS", JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            JOptionPane.showMessageDialog(this, "No se pudo registrar el pedido contacte con sistemas!!!", "TOP-SUELAS", JOptionPane.WARNING_MESSAGE);
                        }
                        cleanTable();
                        limpiarCliente();
                        limpiarPedido();
                        cargarPedido();
                        JtNpc.requestFocus();
                    }
                    //SI YA HAY PEDIDOS    
                } else {
                    //SI ES SERIE A
                    if (Serie.equals("A")) {
                        if (pedido.insertarVentaAPam(pd, detalles, JtNpedido.getText())) {
                            JOptionPane.showMessageDialog(this, "Pedido realizado correctamente!!!", "TOP-SUELAS", JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            JOptionPane.showMessageDialog(this, "No se pudo registrar el pedido contacte con sistemas!!!", "TOP-SUELAS", JOptionPane.WARNING_MESSAGE);
                        }
                        limpiarCliente();
                        cleanTable();
                        limpiarPedido();
                        cargarPedido();
                        JtNpc.requestFocus();
                    } //SI ES SERIE B
                    else if (Serie.equals("B")) {
                        if (pedido.insertarVentaBPam(pd, detalles, JtNpedido.getText())) {
                            JOptionPane.showMessageDialog(this, "Pedido realizado correctamente!!!", "TOP-SUELAS", JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            JOptionPane.showMessageDialog(this, "No se pudo registrar el pedido contacte con sistemas!!!", "TOP-SUELAS", JOptionPane.WARNING_MESSAGE);
                        }
                        limpiarCliente();
                        cleanTable();
                        limpiarPedido();
                        cargarPedido();
                        JtNpc.requestFocus();
                    }
                }
            }
        }
    }

    private void JbNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JbNuevoActionPerformed
        int var = Integer.parseInt(JtNpedido.getText());
        //VALIDAR LA FECHA DE ENTREGA 
        if (validarFecha()) {
            //VALIDAR QUE NO EXISTA EL PEDIDO
            if (pedido.validarPedido(var) == 0) {
                nuevoPedido();
            } else {
                cargarPedido();
                int opcion = JOptionPane.showConfirmDialog(this, "¬øContinuar con el pedido?", JtPedido.getToolTipText(), JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (opcion == JOptionPane.YES_OPTION) {
                    nuevoPedido();
                }
            }
        }
    }//GEN-LAST:event_JbNuevoActionPerformed

    private void JtCantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JtCantActionPerformed
        validarCorridas();
    }//GEN-LAST:event_JtCantActionPerformed

    private void JbEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JbEliminarActionPerformed
        if (comprobarPedido()) {
            String Np = JtNpedido.getText();
            Parametro pam = new Parametro();
            pam.setNpedido(Np);

            int opcion = JOptionPane.showConfirmDialog(this, "¬øQuieres cancelar este pedido?", "TOP-SUELAS", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

            if (opcion == JOptionPane.YES_OPTION) {
                if (Serie.equals("A")) {
                    if (pedido.cancelarPedidoA(JtNpedido.getText())) {
                        JOptionPane.showMessageDialog(this, "Se ha cancelado el pedido!!!", "TOP-SUELAS", JOptionPane.INFORMATION_MESSAGE);
                        limpiarCliente();
                        limpiarProducto();
                        limpiarPedido();
                        cargarPedido();
                    } else {
                        JOptionPane.showMessageDialog(null, "No se puede cancelar este pedido", "TOP-SUELAS", JOptionPane.INFORMATION_MESSAGE);
                        limpiarCliente();
                        limpiarProducto();
                        limpiarPedido();
                    }
                } else {
                    if (pedido.cancelarPedidoB(Np)) {
                        JOptionPane.showMessageDialog(this, "Se ha cancelado el pedido!!!", "TOP-SUELAS", JOptionPane.INFORMATION_MESSAGE);
                        limpiarCliente();
                        limpiarProducto();
                        limpiarPedido();
                    } else {
                        JOptionPane.showMessageDialog(null, "No se puede cancelar este pedido", "TOP-SUELAS", JOptionPane.INFORMATION_MESSAGE);
                        limpiarCliente();
                        limpiarProducto();
                        limpiarPedido();
                    }
                }
            }
        }
    }//GEN-LAST:event_JbEliminarActionPerformed

    private void JbActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JbActualizarActionPerformed
        int row = JtPedido.getSelectedRow();

        if (comprobarPedido()) {
            if (row >= 0) {

                Dpedido det = new Dpedido();
                Renglon = Integer.parseInt((String) modelPedido.getValueAt(row, 1));
                det.setC1(Integer.parseInt((String) JtPedido.getValueAt(row, 5)));
                det.setC2(Integer.parseInt((String) JtPedido.getValueAt(row, 6)));
                det.setC3(Integer.parseInt((String) JtPedido.getValueAt(row, 7)));
                det.setC4(Integer.parseInt((String) JtPedido.getValueAt(row, 8)));
                det.setC5(Integer.parseInt((String) JtPedido.getValueAt(row, 9)));
                det.setC6(Integer.parseInt((String) JtPedido.getValueAt(row, 10)));
                det.setC7(Integer.parseInt((String) JtPedido.getValueAt(row, 11)));
                det.setC8(Integer.parseInt((String) JtPedido.getValueAt(row, 12)));
                det.setC9(Integer.parseInt((String) JtPedido.getValueAt(row, 13)));
                det.setC10(Integer.parseInt((String) JtPedido.getValueAt(row, 14)));
                det.setC11(Integer.parseInt((String) JtPedido.getValueAt(row, 15)));
                det.setC12(Integer.parseInt((String) JtPedido.getValueAt(row, 16)));
                det.setPares(Integer.parseInt((String) JtPedido.getValueAt(row, 17)));
                det.setImporte(Double.parseDouble((String) JtPedido.getValueAt(row, 19)));
                det.setRenglon(Integer.parseInt((String) JtPedido.getValueAt(row, 1)));
                det.setNpedido(JtNpedido.getText());

                Pedido pd = new Pedido();
                pd.setNpedido(JtNpedido.getText());
                pd.setCostoTotal(Double.parseDouble(lblTotal.getText()));
                pd.setTotalPares(Integer.parseInt(lblPares.getText()));

                int opcion = JOptionPane.showConfirmDialog(this, "¬øModificar registro del pedido?", "TOP-SUELAS", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

                if (opcion == JOptionPane.YES_OPTION) {
                    if (Serie.equals("A")) {
                        if (pedido.actualizarPedidoA(pd, det, Renglon)) {
                            JOptionPane.showMessageDialog(this, "Se actualizo el pedido!!!", "TOP-SUELAS", JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            JOptionPane.showMessageDialog(this, "Este pedido no se puede modificar!!!", "TOP-SUELAS", JOptionPane.INFORMATION_MESSAGE);
                        }
                    } else {
                        if (pedido.actualizarPedidoAPhy(pd, det, Renglon)) {
                            JOptionPane.showMessageDialog(this, "Se actualizo el pedido!!!", "TOP-SUELAS", JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            JOptionPane.showMessageDialog(this, "Este pedido no se puede modificar!!!", "TOP-SUELAS", JOptionPane.INFORMATION_MESSAGE);

                        }
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Debe de seleccionar un registro para poder actualizarlo");
            }
        }
    }//GEN-LAST:event_JbActualizarActionPerformed

    private void JbImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JbImprimirActionPerformed
        ReportePedidos nuevo = new ReportePedidos(null, true);
        nuevo.setVisible(true);
        nuevo.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        nuevo.setAlwaysOnTop(true);
    }//GEN-LAST:event_JbImprimirActionPerformed

    private void JbSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JbSalirActionPerformed
        dispose();
    }//GEN-LAST:event_JbSalirActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        Cerrar();
    }//GEN-LAST:event_formWindowClosing

    private void JtClienteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JtClienteKeyReleased
        JpCliente.setVisible(true);
        limpiarListaClientes();
        if (JtCliente.getText().isEmpty()) {
            limpiarListaClientes();
            JpCliente.setVisible(false);
            limpiarCliente();
        } else {

            ArrayList<Cliente> listaClientesR = objC.clienteGetByRz(JtCliente.getText());

            if (Serie.equals("A")) {
                listaClientesR.forEach((cli) -> {
                    if (!cli.getRazonSocial().equals("")) {
                        cli.setNombre(cli.getRazonSocial());
                        modeloListaCliente.addElement(cli);
                    } else if (cli.getRazonSocial().equals("")) {
                        ms = "ESTE CLIENTE NO TIENE RAZ√ìN SOCIAL";
                        cli.setNombre("ESTE CLIENTE NO TIENE RAZ√ìN SOCIAL");
                        modeloListaCliente.addElement(cli);
                    }
                });
            } else if (Serie.equals("B")) {
                listaClientesR.forEach((cli) -> {
                    modeloListaCliente.addElement(cli);
                });
            }
        }
    }//GEN-LAST:event_JtClienteKeyReleased

    private void JtClienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JtClienteMouseClicked
        if (evt.getClickCount() > 1) {
            JtCliente.setText("");
            limpiarListaClientes();
            JpCliente.setVisible(false);
            limpiarCliente();
        }
    }//GEN-LAST:event_JtClienteMouseClicked

    private void JtClienteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JtClienteKeyTyped
        char c = evt.getKeyChar();
        if (Character.isLowerCase(c)) {
            String cad = ("" + c).toUpperCase();
            c = cad.charAt(0);
            evt.setKeyChar(c);
        }
    }//GEN-LAST:event_JtClienteKeyTyped

    private void JlClientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JlClientesMouseClicked
        JList lis = (JList) evt.getSource();

        if (evt.getClickCount() == 1) {
            Cliente cl = (Cliente) lis.getSelectedValue();

            if (Serie.equals("A")) {
                if (cl.getRazonSocial().equals("")) {
                    JOptionPane.showMessageDialog(null, ms, "TOP-SUELAS", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JtCliente.setText(cl.getNombre());
                    JbCliente.setText(cl.getNombre());
                    JbCalle.setText(cl.getCalle());
                    JbCP.setText(cl.getCP());
                    JbColonia.setText(cl.getColonia());
                    JbCD.setText(cl.getCiudad());
                    JbEstado.setText(cl.getEstado());
                    JbPais.setText(cl.getPais());
                    JbPlazo.setText("Plazo" + " " + String.valueOf(cl.getDiasCredito()) + " " + "D√≠as");
                    JbAgente.setText("Agente" + " " + String.valueOf(cl.getId_Agente()));
                    JtCobranza.setText(cl.getObservaciones());
                    limpiarListaClientes();
                    idcliente = cl.getId_Cliente();
                    JpCliente.setVisible(false);
                }
            } else if (Serie.equals("B")) {
                JtCliente.setText(cl.getNombre());
                JbCliente.setText(cl.getNombre());
                JbCalle.setText(cl.getCalle());
                JbCP.setText(cl.getCP());
                JbColonia.setText(cl.getColonia());
                JbCD.setText(cl.getCiudad());
                JbEstado.setText(cl.getEstado());
                JbPais.setText(cl.getPais());
                JbPlazo.setText("Plazo" + " " + String.valueOf(cl.getDiasCredito()) + " " + "D√≠as");
                JbAgente.setText("Agente" + " " + String.valueOf(cl.getId_Agente()));
                JtCobranza.setText(cl.getObservaciones());
                limpiarListaClientes();
                idcliente = cl.getId_Cliente();
                JpCliente.setVisible(false);
            }

            JcPrecio.requestFocus();
            JcPrecio.setForeground(java.awt.Color.red);
        }
    }//GEN-LAST:event_JlClientesMouseClicked

    private void JtSuelaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JtSuelaKeyTyped
        char c = evt.getKeyChar();
        if (Character.isLowerCase(c)) {
            String cad = ("" + c).toUpperCase();
            c = cad.charAt(0);
            evt.setKeyChar(c);
        }
    }//GEN-LAST:event_JtSuelaKeyTyped

    private void JtSuelaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JtSuelaKeyReleased
        JpSuelas.setVisible(true);
        limpiarListaProductos();
        if (JtSuela.getText().isEmpty()) {
            limpiarListaProductos();
            JpSuelas.setVisible(false);
            limpiarProducto();
        } else {
            ArrayList<Producto> listaProductos = op.GetByCliente(idcliente, JtSuela.getText());

            for (Producto prod : listaProductos) {
                modeloListaProducto.addElement(prod);
            }
        }
    }//GEN-LAST:event_JtSuelaKeyReleased

    private void JtSuelaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JtSuelaMouseClicked
        if (evt.getClickCount() > 1) {
            JtSuela.setText("");
            limpiarListaProductos();
            JpSuelas.setVisible(false);
            limpiarProducto();
        }
    }//GEN-LAST:event_JtSuelaMouseClicked

    private void JlSuelasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JlSuelasMouseClicked
        JList lis = (JList) evt.getSource();

        if (evt.getClickCount() == 1) {
            Producto prod = (Producto) lis.getSelectedValue();
            JtCorrida.setText(prod.getDescripcionCorrida());
            JtColor.setText(prod.getDescripcionColor());
            JtSuela.setText(prod.getDescripcion());
            Jpi.setText(String.valueOf(prod.getPti()));
            Jpf.setText(String.valueOf(prod.getPtf()));
            limpiarListaProductos();
            idprod = prod.getId_Producto();
            JpSuelas.setVisible(false);
            JcPrecio.requestFocus();

            if (Serie.equals("A") && JcPrecio.isSelected() == false) {
                double precio = prod.getPrecioAP();
                JtPrecio.setText(format.format(precio));
            } else if (Serie.equals("A") && JcPrecio.isSelected() == true) {
                double precio = prod.getPrecioA();
                JtPrecio.setText(format.format(precio));
            } else if (Serie.equals("B") && JcPrecio.isSelected() == false) {
                double precio = prod.getPrecioBP();
                JtPrecio.setText(format.format(precio));
            } else if (Serie.equals("B") && JcPrecio.isSelected() == true) {
                double precio = prod.getPrecioB();
                JtPrecio.setText(format.format(precio));
            }
            JtCant.requestFocus();
        }
    }//GEN-LAST:event_JlSuelasMouseClicked

    private void JtNpcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JtNpcActionPerformed
        JtOcompra.requestFocus();
    }//GEN-LAST:event_JtNpcActionPerformed

    private void JtOcompraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JtOcompraActionPerformed
        JtCliente.requestFocus();
    }//GEN-LAST:event_JtOcompraActionPerformed

    private void JbQuitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JbQuitarActionPerformed
        int row = JtPedido.getSelectedRow();

        if (comprobarPedido()) {
            Renglon = Integer.parseInt((String) modelPedido.getValueAt(row, 1));
            if (row >= 0) {
                int opcion = JOptionPane.showConfirmDialog(this, "¬øQuitar registro del pedido?", "TOP-SUELAS", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (opcion == JOptionPane.YES_OPTION) {
                    modelPedido.removeRow(row);

                    Pedido pd = new Pedido();
                    pd.setNpedido(JtNpedido.getText());
                    pd.setCostoTotal(Double.parseDouble(lblTotal.getText()));
                    pd.setTotalPares(Integer.parseInt(lblPares.getText()));

                    if (JbSerie.getText().equals("A")) {
                        if (pedido.eliminarPedidoA(pd, Renglon, JtNpedido.getText())) {
                            JOptionPane.showMessageDialog(this, "Registro eliminado correctamente!!!", "TOP-SUELAS", JOptionPane.INFORMATION_MESSAGE);
                            JtSuela.requestFocus();
                        } else {
                            JOptionPane.showMessageDialog(null, "Este pedido ya fue surtido", "TOP-SUELAS", JOptionPane.INFORMATION_MESSAGE);
                            JtSuela.requestFocus();
                        }
                    } else {
                        if (pedido.eliminarPedidoB(pd, Renglon, JtNpedido.getText())) {
                            JOptionPane.showMessageDialog(this, "Registro eliminado correctamente!!!", "TOP-SUELAS", JOptionPane.INFORMATION_MESSAGE);
                            JtSuela.requestFocus();
                        } else {
                            JOptionPane.showMessageDialog(this, "Registro eliminado correctamente!!!", "TOP-SUELAS", JOptionPane.INFORMATION_MESSAGE);
                            JtSuela.requestFocus();
                        }
                    }
                    idprod = 0;
                }
            }
        } else {
            if (row >= 0) {
                int opcion = JOptionPane.showConfirmDialog(this, "¬øQuitar registro del pedido?", "TOP-SUELAS", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (opcion == JOptionPane.YES_OPTION) {
                    modelPedido.removeRow(row);
                    JtSuela.requestFocus();
                    idprod = 0;
                }
            } else {
                JOptionPane.showMessageDialog(null, "No se ha seleccionado ningun registro");
            }
        }
    }//GEN-LAST:event_JbQuitarActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        if (array.size() > 0) {
            MostrarDetalle();
        }
    }//GEN-LAST:event_formWindowActivated

    private void JtNpedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JtNpedidoActionPerformed
        if (JtNpedido.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "No introduciste un numero de pedido", "TOP-SUELAS", JOptionPane.WARNING_MESSAGE);
            JtNpedido.requestFocus();
        } else {
            ArrayList<Pedido> lista = pedido.pedidoGetByID(JtNpedido.getText(), Serie);
            if (lista.size() > 0) {
                cleanTable();
                String dt[] = new String[21];

                for (Pedido p : lista) {
                    Serie = p.getSerie();

                    if (Serie.equals("A")) {
                        JbSerie.setIcon(campana);
                        JbSerie.setText("");
                        if (p.getRsocial() != null || !p.getRsocial().equals("")) {
                            p.setNombre(p.getRsocial());
                        }
                        //JOptionPane.showMessageDialog(this, "Este clilente no tiene raz√≥n social", "TOP-SUELAS", JOptionPane.WARNING_MESSAGE);

                    } else if (Serie.equals("B")) {
                        JbSerie.setIcon(notificacion);
                        JbSerie.setText("");
                    }
                    JtCliente.setEditable(false);
                    JtSuela.requestFocus();
                    idcliente = p.getId_Cliente();
                    JtCliente.setText(p.getNombre());
                    JbCliente.setText(p.getNombre());
                    JbCalle.setText(p.getCalle());
                    JbColonia.setText(p.getColonia());
                    JbCD.setText(p.getCiudad());
                    JbEstado.setText(p.getEstado());
                    JbCP.setText(p.getCp());
                    JbPais.setText(p.getPais());
                    JtNpc.setText(p.getNpedidoCl());
                    JtNpedido.setText(p.getNpedido());
                    JbPlazo.setText("Plazo" + " " + String.valueOf(p.getCred()) + " " + "D√≠as");
                    JbAgente.setText("Agente" + " " + String.valueOf(p.getAgente()));
                    JtCobranza.setText(p.getObservaciones());
                    JdPedido.setDate(p.getFecha_Pedido());
                    JdCaptura.setDate(p.getFecha_Captura());
                    JdEntrega.setDate(p.getFecha_Entrega());
                    JdRecibido.setDate(p.getFecha_Recibido());
                    JtOcompra.setText(p.getOrdenCompra());

                    dt[0] = String.valueOf(p.getId_Producto());
                    dt[1] = String.valueOf(p.getRenglon());
                    dt[2] = p.getSuela();
                    dt[3] = p.getColor();
                    dt[4] = p.getCorrida();
                    dt[5] = String.valueOf(p.getC1());
                    dt[6] = String.valueOf(p.getC2());
                    dt[7] = String.valueOf(p.getC3());
                    dt[8] = String.valueOf(p.getC4());
                    dt[9] = String.valueOf(p.getC5());
                    dt[10] = String.valueOf(p.getC6());
                    dt[11] = String.valueOf(p.getC7());
                    dt[12] = String.valueOf(p.getC8());
                    dt[13] = String.valueOf(p.getC9());
                    dt[14] = String.valueOf(p.getC10());
                    dt[15] = String.valueOf(p.getC11());
                    dt[16] = String.valueOf(p.getC12());
                    dt[17] = String.valueOf(p.getPares());
                    dt[18] = format.format(p.getPrecio());
                    dt[19] = format.format(p.getImporte());
                    dt[20] = p.getStatus();
                    modelPedido.addRow(dt);
                }
            } else {
                JOptionPane.showMessageDialog(this, "No existe este pedido, o No pertenece a la serie", "TOP-SUELAS", JOptionPane.WARNING_MESSAGE);
                JtNpedido.setText("");
                JtNpedido.requestFocus();
            }
        }
    }//GEN-LAST:event_JtNpedidoActionPerformed

    private void JbBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JbBuscarActionPerformed
        JtNpedido.setEditable(true);
        JtNpedido.setText("");
        JtNpedido.requestFocus();
        deshabilitarCampos();
    }//GEN-LAST:event_JbBuscarActionPerformed

    private void limpiarCliente() {
        JbCliente.setText("----------------------------------------------------------");
        JbCalle.setText("----------------------------------------------------------");
        JbCP.setText("----------------------------------------------------------");
        JbColonia.setText("----------------------------------------------------------");
        JbCD.setText("----------------------------------------------------------");
        JbEstado.setText("----------------------------------------------------------");
        JbPais.setText("----------------------------------------------------------");
        JbPlazo.setText("----------------------------------------------------------");
        JbAgente.setText("----------------------------------------------------------");
        JtCobranza.setText("----------------------------------------------------------");
        idcliente = 0;
        JtCliente.setText("");
    }

    private void limpiarProducto() {
        JtCorrida.setText("");
        JtColor.setText("");
        idprod = 0;
        JtPrecio.setText("");
        JtCant.setText("");
        Jpi.setText("");
        Jpf.setText("");
        JtSuela.setText("");
        JtSuela.requestFocus();
    }

    private void limpiarCampos() {
        array.clear();
        c1 = "0";
        c2 = "0";
        c3 = "0";
        c4 = "0";
        c5 = "0";
        c6 = "0";
        c7 = "0";
        c8 = "0";
        c9 = "0";
        c10 = "0";
        c11 = "0";
        c12 = "0";
    }

    private void limpiarPedido() {
        JtNpc.setText("");
        JtOcompra.setText("");
        lblTotal.setText("0.00");
        lblPares.setText("0");
        Calendar fechaActual = new GregorianCalendar();
        JdCaptura.setCalendar(fechaActual);
        JdPedido.setCalendar(fechaActual);
        JdEntrega.setCalendar(fechaActual);
        JdRecibido.setCalendar(fechaActual);
    }

    private void Cerrar() {
        String botones[] = {"SI", "NO"};
        int eleccion = JOptionPane.showOptionDialog(this, "¬øDeseas cerrar esta ventana?", "TOP-SUELAS",
                0, 0, null, botones, this);
        if (eleccion == JOptionPane.YES_OPTION) {
            this.dispose();
        } else if (eleccion == JOptionPane.NO_OPTION) {
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ped.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ped.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ped.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ped.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ped().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JbActualizar;
    private javax.swing.JLabel JbAgente;
    private javax.swing.JButton JbBorrar;
    private javax.swing.JButton JbBuscar;
    private javax.swing.JLabel JbCD;
    private javax.swing.JLabel JbCP;
    private javax.swing.JLabel JbCalle;
    private javax.swing.JLabel JbCliente;
    private javax.swing.JLabel JbColonia;
    private javax.swing.JButton JbEliminar;
    private javax.swing.JLabel JbEstado;
    private javax.swing.JButton JbImprimir;
    private javax.swing.JButton JbNuevo;
    private javax.swing.JLabel JbPais;
    private javax.swing.JLabel JbPlazo;
    private javax.swing.JButton JbQuitar;
    private javax.swing.JButton JbSalir;
    private javax.swing.JLabel JbSerie;
    private javax.swing.JCheckBox JcPrecio;
    private com.toedter.calendar.JDateChooser JdCaptura;
    private com.toedter.calendar.JDateChooser JdEntrega;
    private com.toedter.calendar.JDateChooser JdPedido;
    private com.toedter.calendar.JDateChooser JdRecibido;
    private javax.swing.JList<Cliente> JlClientes;
    private javax.swing.JList<Producto> JlSuelas;
    private javax.swing.JPanel JpCliente;
    private javax.swing.JPanel JpDpedido;
    private javax.swing.JPanel JpFacturas;
    private javax.swing.JPanel JpObservaciones;
    private javax.swing.JPanel JpSuelas;
    private javax.swing.JLabel Jpf;
    private javax.swing.JLabel Jpi;
    private javax.swing.JTextField JtCancelar;
    private javax.swing.JTextField JtCant;
    private javax.swing.JTextField JtCliente;
    private javax.swing.JTextField JtCobranza;
    private javax.swing.JTextField JtColor;
    private javax.swing.JTextField JtCorrida;
    private javax.swing.JTable JtFacturas;
    private javax.swing.JTextField JtNpc;
    private javax.swing.JTextField JtNpedido;
    private javax.swing.JTextField JtOcompra;
    private javax.swing.JTable JtPedido;
    private javax.swing.JTextField JtPrecio;
    private javax.swing.JTextField JtSuela;
    private javax.swing.JTabbedPane JtabDatos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblPares;
    private javax.swing.JLabel lblTotal;
    // End of variables declaration//GEN-END:variables
}
